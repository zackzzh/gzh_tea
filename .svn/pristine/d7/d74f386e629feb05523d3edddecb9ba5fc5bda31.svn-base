new Vue({
    el: '#main_div',
    data() {
        return {
            active: null,
            title: ["全部", "生产中", "待付款", "待发货", "待收货", "已完成", "退货"],
            orderList: [],
            show: false, //设计订单生成普通订单弹窗
            formData: {
                quantity: '',
                remark: ''
            },
            item: {}
        }
    },
    mounted() {
        /**
         * getPathData获取订单的索引
         */
        const getPathData = JSON.parse(sessionStorage.getItem("orderindex"))
        console.log('getPathData', getPathData)
        var options = getPathData
        switch (Number(options.index)) {
            case -1:
                this.load({})
                this.active = 0;
                break;
            case 0:
                this.load({
                    order_status: 0
                })
                this.active = 2;
                break;
            case 2:
                this.load({
                    order_status: 2
                })
                this.active = 4;
                break;
            case 3:
                this.load({
                    order_status: 3
                })
                this.active = 5;
                break;
            case 5:
                this.load({
                    order_status: 5
                })
                this.active = 1;
                break;
            default:
                break;
        }
    },
    methods: {
        toDetail(item) {
            sessionStorage.setItem("orders_item", JSON.stringify(item))
            $go({
                path: 'order_detail'
            })
        },
        /**
         * 初始化数据
         * @param {*} val 
         */
        load(val) {
            $myAPi.orders(val).then((res) => {
                this.orderList = res.data
            })
        },
        /**
         * 切换订单状态
         * @param {*} index 
         */
        tabs(index) {
            console.log('index', index)
            switch (index) {
                case 0:
                    this.load({})
                    this.active = 0;
                    break;
                case 1:
                    this.load({
                        order_status: 5
                    })
                    this.active = 1;
                    break;
                case 2:
                    this.load({
                        order_status: 0
                    })
                    this.active = 2;
                    break;
                case 3:
                    this.load({
                        order_status: 1
                    })
                    this.active = 3;
                    break;
                case 4:
                    this.load({
                        order_status: 2
                    })
                    this.active = 4;
                    break;
                case 5:
                    this.load({
                        order_status: 3
                    })
                    this.active = 5;
                    break;
                case 6:
                    this.load({
                        order_status: 6
                    })
                    this.active = 6;
                    break;
            }
        },
        //设计订单设计完成满意操作
        design(item, index) {
            var title = ''
            var message = ''
            if (index == 0) {
                title = '不满意'
                message = '不满意这件设计'
            } else {
                title = '满意'
                message = '满意这件设计'
            }
            vant.Dialog.confirm({
                title: title,
                message: message
            }).then(() => {
                var data = {
                    order_number: item.order_number,
                    status: Number(index)
                }
                $myAPi.change_design_state(data).then((res) => {
                    $toast(res);
                    if (res.state == 1) {
                        var val = {
                            order_status: 2
                        }
                        this.load(val)
                    }
                })
            }).catch(() => {});
        },
        //设计订单生成普通订单
        create(item) {
            sessionStorage.setItem("orders_item", JSON.stringify(item))
            $go({
                path: 'order_design'
            })
        },

        /**
         * 待支付
         * @param {*} item 
         */
        pay(item) {
            var _this = this;
            $api.payWechat({
                order_number: item.order_number
            }).then(resWechat => {
                // console.log('payWechat', resWechat);
                if (resWechat.state == 1) {
                    WeixinJSBridge.invoke(
                        'getBrandWCPayRequest', {
                            "appId": resWechat.data.appId, //公众号名称，由商户传入     
                            "timeStamp": resWechat.data.timeStamp, //时间戳，自1970年以来的秒数     
                            "nonceStr": resWechat.data.nonceStr, //随机串     
                            "package": resWechat.data.package,
                            "signType": "MD5", //微信签名方式：     
                            "paySign": resWechat.data.paySign //微信签名 
                        },
                        (d) => {
                            if (d.err_msg == "get_brand_wcpay_request:ok") {
                                var val = {
                                    order_status: 0
                                }
                                _this.load(val);
                                // 使用以上方式判断前端返回,微信团队郑重提示：
                                //res.err_msg将在用户支付成功后返回ok，但并不保证它绝对可靠。
                            }
                        });
                    // wx.chooseWXPay({
                    //     timestamp: resWechat.data.timeStamp, // 支付签名时间戳，注意微信jssdk中的所有使用timestamp字段均为小写。但最新版的支付后台生成签名使用的timeStamp字段名需大写其中的S字符
                    //     nonceStr: resWechat.data.nonceStr, // 支付签名随机串，不长于 32 位
                    //     package: resWechat.data.package, // 统一支付接口返回的prepay_id参数值，提交格式如：prepay_id=\*\*\*）
                    //     signType: resWechat.data.signType, // 签名方式，默认为'SHA1'，使用新版支付需传入'MD5'
                    //     paySign: resWechat.data.paySign, // 支付签名
                    //     success: function (res) {
                    //         // 支付成功后的回调函数
                    //         var val = {
                    //             order_status: _this.active - 1
                    //         }
                    //         _this.load(val);
                    //     },
                    //     error: function (err) {
                    //         console.log('----------------------------', err);
                    //     }
                    // });
                }
            })
        },
        /**
         * 确认收货
         * @param {*} item 
         */
        confirm_goods(item) {
            vant.Dialog.confirm({
                title: '确认收货',
                message: '确认收到这件商品'
            }).then(() => {
                $myAPi.confirm_receipt(item.order_number).then((res) => {
                    $toast(res);
                    if (res.state == 1) {
                        var val = {
                            order_status: 2
                        }
                        this.load(val)
                    }
                })
            }).catch(() => {});
        },
        /**
         * 评论页面
         * @param {*} item 
         * @param {*} order_number 
         */
        comment(item, order_number) {
            Object.assign(item, {
                order_number: order_number
            })
            sessionStorage.setItem("order_item", JSON.stringify(item))
            $go({
                path: 'comment'
            })
        },
        /**
         * 申请退货
         * @param {*} item 
         */
        reback(item) {
            vant.Dialog.confirm({
                title: '申请退货',
                message: '确认要申请退货吗'
            }).then(() => {
                $myAPi.order_refund(item.order_number).then((res) => {
                    $toast(res);
                    if (res.state == 1) {
                        switch (this.active) {
                            case 0:
                                this.active = 0;
                                break;
                            case 1:
                                this.load({
                                    order_status: 5
                                })
                                break;
                            case 2:
                                this.load({
                                    order_status: 0
                                })
                                break;
                            case 3:
                                this.load({
                                    order_status: 1
                                })
                                break;
                            case 4:
                                this.load({
                                    order_status: 2
                                })
                                break;
                            case 5:
                                this.load({
                                    order_status: 3
                                })
                                break;
                            case 6:
                                this.load({
                                    order_status: 6
                                })
                                break;
                        }
                    }
                })
            }).catch(() => {});
        },
        onClickLeft(val) {
            $go({
                path: 'mine'
            });
        },
    }
});